using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using Office = Microsoft.Office.Core;
using System.Drawing;

// TODO:  Follow these steps to enable the Ribbon (XML) item:

// 1: Copy the following code block into the ThisAddin, ThisWorkbook, or ThisDocument class.

//  protected override Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject()
//  {
//      return new MalwareForwarderRibbon();
//  }

// 2. Create callback methods in the "Ribbon Callbacks" region of this class to handle user
//    actions, such as clicking a button. Note: if you have exported this Ribbon from the Ribbon designer,
//    move your code from the event handlers to the callback methods and modify the code to work with the
//    Ribbon extensibility (RibbonX) programming model.

// 3. Assign attributes to the control tags in the Ribbon XML file to identify the appropriate callback methods in your code.  

// For more information, see the Ribbon XML documentation in the Visual Studio Tools for Office Help.


namespace MalwareForwarder
{
    [ComVisible(true)]
    public class MalwareForwarderRibbon : Office.IRibbonExtensibility
    {
        private Office.IRibbonUI ribbon;

        public MalwareForwarderRibbon()
        {
        }

        public Bitmap RibbonImageLoad(Office.IRibbonControl control)
        {
            switch (control.Id)
            {
                case "submitMalwareButton":
                    {
                        return new Bitmap(Properties.Resources.malware);
                    }
                case "submitSpamButton":
                    {
                        return new Bitmap(Properties.Resources.spam);
                    }
            }

            return null;
        }

        public Boolean RibbonButtonVisible(Office.IRibbonControl control)
        {
            // Failsafe - if both are set to false, something went wrong, so make sure both show...
            // If both are hidden, then group doesn't show and we can't get to the preferences to fix
            // the preferences issue.
            if((Globals.ThisAddIn.preferences.ShowMalwareButton == false) && (Globals.ThisAddIn.preferences.ShowSpamButton == false))
            {
                return true;
            }

            switch (control.Id)
            {
                case "submitMalwareButton":
                    {
                        if(Globals.ThisAddIn.preferences.ShowMalwareButton == true)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                case "submitSpamButton":
                    {
                        if(Globals.ThisAddIn.preferences.ShowSpamButton == true)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }

                default:
                    {
                        return true;
                    }
            }
        }

        #region IRibbonExtensibility Members

        public string GetCustomUI(string ribbonID)
        {
            return GetResourceText("MalwareForwarder.MalwareForwarderRibbon.xml");
        }

        #endregion

        #region Ribbon Callbacks
        //Create callback methods here. For more information about adding callback methods, visit https://go.microsoft.com/fwlink/?LinkID=271226

        public void Ribbon_Load(Office.IRibbonUI ribbonUI)
        {
            this.ribbon = ribbonUI;
        }

        public void OnSubmitMalware(Office.IRibbonControl control)
        {
            switch (control.Id)
            {
                case "submitMalwareButton":
                    {
                        Globals.ThisAddIn.ForwardItems(ForwardingType.Malware);
                        return;
                    }
                case "submitSpamButton":
                    {
                        Globals.ThisAddIn.ForwardItems(ForwardingType.Spam);
                        return;
                    }
            }
        }

        public void OnConfigDialog(Office.IRibbonControl control)
        {
            ConfigDialogControl configDialog = new ConfigDialogControl();
            // Makes the dialog open centered on the screen that Outlook is using.
            configDialog.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
            // .ShowDialog makes it modal, .Show makes it a regular window - which could get lost.
            configDialog.ShowDialog();

            ribbon.Invalidate();
        }
        #endregion

        #region Helpers

        private static string GetResourceText(string resourceName)
        {
            Assembly asm = Assembly.GetExecutingAssembly();
            string[] resourceNames = asm.GetManifestResourceNames();
            for (int i = 0; i < resourceNames.Length; ++i)
            {
                if (string.Compare(resourceName, resourceNames[i], StringComparison.OrdinalIgnoreCase) == 0)
                {
                    using (StreamReader resourceReader = new StreamReader(asm.GetManifestResourceStream(resourceNames[i])))
                    {
                        if (resourceReader != null)
                        {
                            return resourceReader.ReadToEnd();
                        }
                    }
                }
            }
            return null;
        }

        #endregion
    }
}
