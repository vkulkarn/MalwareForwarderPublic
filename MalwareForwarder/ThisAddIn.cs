using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Outlook = Microsoft.Office.Interop.Outlook;
using Office = Microsoft.Office.Core;

namespace MalwareForwarder
{
    // used when calling ForwardItems(..).
    public enum ForwardingType { Malware, Spam };

    public class MalwareForwarderPreferences
    {
        // Read-only properties.
        public string DefaultSubjectMalware { get; }
        public string DefaultSubjectSpam { get; }

        // Read-Write properties.
        public string ForwardingEmailAddressMalware { get; set; }
        public string ForwardingEmailAddressSpam { get; set; }
        public Boolean ShowMalwareButton { get; set; }
        public Boolean ShowSpamButton { get; set; }
        public Boolean DeleteSubmittedItems { get; set; }
        public Boolean SaveSubmittedInSent { get; set; }

        // Default Constructor.
        public MalwareForwarderPreferences()
        {
            // Load read-only preferences from the .Net application preferences system.
            DefaultSubjectMalware = Properties.Settings.Default.defaultSubjectMalware;
            DefaultSubjectSpam = Properties.Settings.Default.defaultSubjectSpam;

            // Load read-write preferences from the .Net user preferences system.
            ForwardingEmailAddressMalware = Properties.Settings.Default.forwardingEmailAddressMalware;
            ForwardingEmailAddressSpam = Properties.Settings.Default.forwardingEmailAddressSpam;
            ShowMalwareButton = Properties.Settings.Default.showMalwareButton;
            ShowSpamButton = Properties.Settings.Default.showSpamButton;
            DeleteSubmittedItems = Properties.Settings.Default.deleteSubmittedItems;
            SaveSubmittedInSent = Properties.Settings.Default.saveSubmittedInSent;
        }

        // Copy Constructor.
        public MalwareForwarderPreferences( MalwareForwarderPreferences p )
        {
            DefaultSubjectMalware = p.DefaultSubjectMalware;
            DefaultSubjectSpam = p.DefaultSubjectSpam;

            ForwardingEmailAddressMalware = p.ForwardingEmailAddressMalware;
            ForwardingEmailAddressSpam = p.ForwardingEmailAddressSpam;
            ShowMalwareButton = p.ShowMalwareButton;
            ShowSpamButton = p.ShowSpamButton;
            DeleteSubmittedItems = p.DeleteSubmittedItems;
            SaveSubmittedInSent = p.SaveSubmittedInSent;
        }

        public void Save()
        {
            // Copy over the settings...
            Properties.Settings.Default.forwardingEmailAddressMalware = ForwardingEmailAddressMalware;
            Properties.Settings.Default.forwardingEmailAddressSpam = ForwardingEmailAddressSpam;
            Properties.Settings.Default.showMalwareButton = ShowMalwareButton;
            Properties.Settings.Default.showSpamButton = ShowSpamButton;
            Properties.Settings.Default.deleteSubmittedItems = DeleteSubmittedItems;
            Properties.Settings.Default.saveSubmittedInSent = SaveSubmittedInSent;

            // Save the settings.
            Properties.Settings.Default.Save();
        }

    }



    public partial class ThisAddIn
    {
        // The Preferences object.
        public MalwareForwarderPreferences preferences = null;
        public MalwareForwarderRibbon ribbon = null;

        // This gets used a lot.
        private Outlook.Recipient currentUser = null;

        private void ThisAddIn_Startup(object sender, System.EventArgs e)
        {
            // Load preferences.
            preferences = new MalwareForwarderPreferences();

            // Load this once, it is used many times.
            currentUser = this.Application.ActiveExplorer().Session.CurrentUser;
        }

        private void ThisAddIn_Shutdown(object sender, System.EventArgs e)
        {
            // Note: Outlook no longer raises this event. If you have code that 
            //    must run when Outlook shuts down, see https://go.microsoft.com/fwlink/?LinkId=506785
        }

        protected override Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject()
        {
            MalwareForwarderRibbon ribbon = new MalwareForwarderRibbon();
            return ribbon;
        }

        public void ForwardItems(ForwardingType type)
        {
            // Get list of currently selected items.
            Outlook.Selection selectedItems = this.Application.ActiveExplorer().Selection;
            int count = 1;

            // This gets the regular email address instead of the X.400 style address.
            string currentUserEmailAddress = null;
            if (currentUser.AddressEntry.GetExchangeUser() != null)
            {
                currentUserEmailAddress = currentUser.AddressEntry.GetExchangeUser().PrimarySmtpAddress;
            }
            else
            {
                currentUserEmailAddress = currentUser.AddressEntry.Address;
            }

            // Send one email for each selected item.
            foreach (Object item in selectedItems)
            {
                // create and set up new email
                Outlook.MailItem newEmail = (Outlook.MailItem)this.Application.CreateItem(Outlook.OlItemType.olMailItem);

                switch (type)
                {
                    case ForwardingType.Malware:
                        {
                            newEmail.To = preferences.ForwardingEmailAddressMalware;
                            newEmail.Subject = preferences.DefaultSubjectMalware;
                            break;
                        }

                    case ForwardingType.Spam:
                        {
                            newEmail.To = preferences.ForwardingEmailAddressSpam;
                            newEmail.Subject = preferences.DefaultSubjectSpam;
                            break;
                        }
                }
                                
                
                string emailBody = "Forwarding email(s) from " + currentUser.Name + " <" + currentUserEmailAddress + ">\nForwarding " + count + " out of " + selectedItems.Count + " items.";
                newEmail.Body = emailBody;

                newEmail.Attachments.Add(item);

                // do not save a copy in the Sent Items folder
                newEmail.DeleteAfterSubmit = !(preferences.SaveSubmittedInSent);

                // send the final email
                newEmail.Send();

                count++;
            }

            // delete selected items if that preference is selected.
            // Since we don't know what type of item it is, we have to detect that so we can cast to it and call the Delete() function.
            // All valid Outlook Items will have the Delete() function.
            // reference for the various types: https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.outlook.olitemtype?view=outlook-pia

            if (preferences.DeleteSubmittedItems)
            {
                foreach (Object itemDelete in selectedItems)
                {
                    if (itemDelete is Outlook.MailItem)
                    {
                        ((Outlook.MailItem)itemDelete).Delete();
                    }
                    else if (itemDelete is Outlook.AppointmentItem)
                    {
                        ((Outlook.AppointmentItem)itemDelete).Delete();
                    }
                    else if (itemDelete is Outlook.ContactItem)
                    {
                        ((Outlook.ContactItem)itemDelete).Delete();
                    }
                    else if (itemDelete is Outlook.TaskItem)
                    {
                        ((Outlook.TaskItem)itemDelete).Delete();
                    }
                    else if (itemDelete is Outlook.PostItem)
                    {
                        ((Outlook.PostItem)itemDelete).Delete();
                    }
                    else if (itemDelete is Outlook.NoteItem)
                    {
                        ((Outlook.NoteItem)itemDelete).Delete();
                    }
                    else if (itemDelete is Outlook.JournalItem)
                    {
                        ((Outlook.JournalItem)itemDelete).Delete();
                    }
                    else if (itemDelete is Outlook.DistListItem)
                    {
                        ((Outlook.DistListItem)itemDelete).Delete();
                    }
                    else if (itemDelete is Outlook.MobileItem)
                    {
                        ((Outlook.MobileItem)itemDelete).Delete();
                    }
                    else
                    {
                        // Should never get here.
                    }
                }
            }
        }

        #region VSTO generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InternalStartup()
        {
            this.Startup += new System.EventHandler(ThisAddIn_Startup);
            this.Shutdown += new System.EventHandler(ThisAddIn_Shutdown);
        }
        
        #endregion
    }
}
