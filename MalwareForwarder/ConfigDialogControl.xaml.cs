using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MalwareForwarder
{
    /// <summary>
    /// Interaction logic for ConfigDialogControl.xaml
    /// </summary>
    public partial class ConfigDialogControl : Window
    {
        private MalwareForwarderPreferences workingPreferences = null;

        public ConfigDialogControl()
        {
            // Create a working copy of the preferences.
            workingPreferences = new MalwareForwarderPreferences(Globals.ThisAddIn.preferences);

            // Specify the DataContext.
            this.DataContext = workingPreferences;

            InitializeComponent();

        }

        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            CheckBox checkBox = sender as CheckBox;

            switch (checkBox.Name)
            {
                case "malwareCheckBox":
                    {
                        workingPreferences.ShowMalwareButton = true;
                        break;
                    }
                case "spamCheckBox":
                    {
                        workingPreferences.ShowSpamButton = true;
                        break;
                    }
                case "deleteSubmitted":
                    {
                        workingPreferences.DeleteSubmittedItems = true;
                        break;
                    }
                case "saveForwarded":
                    {
                        workingPreferences.SaveSubmittedInSent = true;
                        break;
                    }
                default:
                    {
                        break;
                    }
            }

        }

        private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            CheckBox checkBox = sender as CheckBox;

            switch (checkBox.Name)
            {
                case "malwareCheckBox":
                    {
                        workingPreferences.ShowMalwareButton = false;
                        break;
                    }
                case "spamCheckBox":
                    {
                        workingPreferences.ShowSpamButton = false;
                        break;
                    }
                case "deleteSubmitted":
                    {
                        workingPreferences.DeleteSubmittedItems = false;
                        break;
                    }
                case "saveForwarded":
                    {
                        workingPreferences.SaveSubmittedInSent = false;
                        break;
                    }
                default:
                    {
                        break;
                    }
            }

        }

        private void Button_Clicked(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;

            switch (button.Name)
            {
                case "AboutButton":
                    {
                        AboutWindow aboutWindow = new AboutWindow();
                        // Makes the dialog open centered on the screen that Outlook is using.
                        aboutWindow.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
                        // .ShowDialog makes it modal, .Show makes it a regular window - which could get lost.
                        aboutWindow.ShowDialog();
                        break;
                    }
                case "RestoreDefaultsButton":
                    {
                        workingPreferences.ForwardingEmailAddressMalware = Properties.Settings.Default.defaultForwardingEmailAddressMalware;
                        workingPreferences.ForwardingEmailAddressSpam = Properties.Settings.Default.defaultForwardingEmailAddressSpam;
                        workingPreferences.ShowMalwareButton = Properties.Settings.Default.defaultShowMalwareButton;
                        workingPreferences.ShowSpamButton = Properties.Settings.Default.defaultShowSpamButton;
                        workingPreferences.DeleteSubmittedItems = Properties.Settings.Default.defaultDeleteSubmittedItems;
                        workingPreferences.SaveSubmittedInSent = Properties.Settings.Default.defaultSaveSubmittedInSent;

                        this.malwareCheckBox.IsChecked = workingPreferences.ShowMalwareButton;
                        this.malwareEmail.Text = workingPreferences.ForwardingEmailAddressMalware;
                        this.spamCheckBox.IsChecked = workingPreferences.ShowSpamButton;
                        this.spamEmail.Text = workingPreferences.ForwardingEmailAddressSpam;
                        this.deleteSubmitted.IsChecked = workingPreferences.DeleteSubmittedItems;
                        this.saveForwarded.IsChecked = workingPreferences.SaveSubmittedInSent;

                        break;
                    }
                case "CancelButton":
                    {
                        this.Close();
                        break;
                    }
                case "SaveButton":
                    {
                        // Only copy the email addresses if the button is enabled.
                        if (workingPreferences.ShowMalwareButton == true)
                        {
                            Globals.ThisAddIn.preferences.ShowMalwareButton = true;
                            Globals.ThisAddIn.preferences.ForwardingEmailAddressMalware = workingPreferences.ForwardingEmailAddressMalware;
                        }
                        else
                        {
                            Globals.ThisAddIn.preferences.ShowMalwareButton = false;
                        }

                        if (workingPreferences.ShowSpamButton == true)
                        {
                            Globals.ThisAddIn.preferences.ShowSpamButton = true;
                            Globals.ThisAddIn.preferences.ForwardingEmailAddressSpam = workingPreferences.ForwardingEmailAddressSpam;
                        }
                        else
                        {
                            Globals.ThisAddIn.preferences.ShowSpamButton = false;
                        }

                        Globals.ThisAddIn.preferences.DeleteSubmittedItems = workingPreferences.DeleteSubmittedItems;
                        Globals.ThisAddIn.preferences.SaveSubmittedInSent = workingPreferences.SaveSubmittedInSent;

                        // Call MalwareForwarderPreferences.Save(), which writes the preferences out to the systems and saves the user preferences.
                        Globals.ThisAddIn.preferences.Save();

                        // Close this window.
                        this.Close();
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }
    }

    // Validation rule for email address fields
    public class EmailValidation : ValidationRule
    {
        public override ValidationResult Validate(object value, CultureInfo cultureInfo)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress((string)value);
                if(addr.Address == (string)value)
                {
                    return new ValidationResult(true, null);
                }
                else
                {
                    return new ValidationResult(false, "Invalid email address.");
                }
            }
            catch (Exception e)
            {
                return new ValidationResult(false, "Invalid email address");
            }
        }
    }
}
